let k =
  compose
    (compose (pure (fun a -> a))
       (pure (fun (a) -> let x = a + 1 in let y = a + x in (a, x, y))))
    (pure (fun (a, x, y) -> y))
let s =
  compose
    (compose
       (compose
          (compose (pure (fun a -> a))
             (pure (fun (a) -> let x = a + 1 in let y = a + x in (a, x, y))))
          (compose
             (both (pure (fun _x_ -> _x_))
                (compose (pure (fun (a, x, y) -> x)) f))
             (pure (fun ((a, x, y), w) -> (a, w, x, y)))))
       (pure (fun (a, w, x, y) -> let z = y + w in (a, w, x, y, z))))
    (pure (fun (a, w, x, y, z) -> z))
